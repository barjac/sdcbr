#!/bin/bash
######################
# sdcbr
# SD Card Backup and Restore
#
# Backs up an SD card interactively as a compressed image.
# Restores a previously backed up compressed image to a similar size or larger SD card.
# Suitable for backing up Raspberry Pi operating system cards.
#
######################
dbg=0
confirm() {
params=( "$1" "$2" "$3" "$4" "$5" )
rval=3
while ((rval > 2));do
    echo -ne "${params[0]} ${params[1]} "
    ans=
    rval=
    IFS= read -r -n1 ans
    if [ -z "$ans" ] || ((${#ans} > 1)); then
        ((rval=3))
    else
        case "$ans" in
            [${params[2]}]*)
                rval=0
                ;;
            [${params[3]}]*)
                rval=1
                ;;
            [${params[4]}]*)
                rval=2
                ;;
            *)
                rval=3
                ;;
        esac
    fi
done
return $rval
}

listdrives() {
# Read all the disks
drives=$(fdisk -l 2>/dev/null | grep "Disk /dev" | grep -v ram | grep -v part| cut -d ' ' -f2|cut -d: -f1|tr '\n ' ' ')
}

detectusb() {
# Loop until found
while true; do
    echo
    if confirm "Make sure the USB stick or SD card is UNPLUGGED now. Ready?" "[Y/N]" "Yy" "Nn";then
        listdrives
        [[ $dbg == 1 ]] && echo "${drives[@]}"
        a=${drives[*]}
        echo -n -e "\nPLUG IN the device to use now. (ESC to abort)\nDetecting."
        while true; do
            listdrives
            ((dbg == 1)) && echo "${drives[@]}"
            b=${drives[*]}
            read -r -s -n1 -t1 key
            if [[ $key = $'\e' ]]; then
                ((esc=1))
                echo -e "\nBye!"
                exit 1
            else 
                key=""
            fi
            ((dbg == 1)) &&  echo "a=${#a[@]}, b=${#b[@]}"
            ((dbg == 1)) &&  echo "a=$a, b=$b"
            [[ ${a[*]} != "${b[*]}" ]] && break
            echo -n "."
        done
        [[ ${a[*]} == "${b[*]}" ]] || ((esc == 1)) && { echo; continue; }
        echo
        echo
    else
        echo -e "\nBye!"; exit 0
    fi
    for item1 in ${b[@]}; do
        for item2 in ${a[@]}; do
            found=0
            if [[ "$item1" == "$item2" ]]; then
                found=1; break
            fi
        done
        [[ $found = 1 ]] && continue
        DISK="$item1"; break
    done
    echo -e "Detected device is $DISK which has the following structure:\n"
    lsblk "$DISK"
    break
done
}

get_data_size() {
# bs=64k
BS=$((64*1024))

# Use fdisk to get used data size in sectors
SECTORS_TO_SAVE=$(fdisk -l $DISK|grep $DISK|grep -v "Disk"|tr -s ' '|cut -d' ' -f3|sort -gr|tr '\n' ' '|cut -d ' ' -f1)
((dbg == 1)) &&  echo "Sectors to save = $SECTORS_TO_SAVE"

# Use fdisk to get sector size in bytes
SECTOR_SIZE=$(fdisk -l $DISK|grep "Units:"|cut -d' ' -f8)
((dbg == 1)) &&  echo "Sector size = $SECTOR_SIZE"

# Get bytes to save
BYTES_TO_SAVE=$((SECTORS_TO_SAVE*SECTOR_SIZE))
((dbg == 1)) &&  echo "Bytes to save = $BYTES_TO_SAVE"

# Count plus one block for safety
COUNT=$(((BYTES_TO_SAVE/BS)+BS))
((dbg == 1)) &&  echo "Count = $COUNT"

((dbg == 1)) &&  echo "bs = $BS"
}

get_dir() {
user=$(users|grep -v root|cut -d ' ' -f1)
DIR=
if [[ -f /home/"$user"/.sdcbr_dir ]] && [[ -d $(cat /home/"$user"/.sdcbr_dir) ]]; then
    DIR=$(cat /home/"$user"/.sdcbr_dir)
else
    if confirm "Please select a default directory for your backups now OK?" "[Y/N]" "Yy" "Nn"; then
        DIR=$(zenity --file-selection --directory 2> /dev/null)
    fi
fi
echo
if confirm "Keep your default backup DIRECTORY as $DIR ?" "N/Y" "Nn" "Yy"; then
    DIR=$(zenity --file-selection --directory --filename="$DIR"/ 2> /dev/null)
    sleep 0.5
    echo -e "\n\nYou selected $DIR"
    if confirm "\nSave this directory as new default?" "[Y/N]" "Yy" "Nn"; then
        echo "$DIR" > /home/"$user"/.sdcbr_dir
    fi
#echo -e "\n\nBackups will be saved to and restored from $DIR"
else
#[[ -f /home/$user/.sdcbr_dir ]] && DIR=$(cat /home/$user/.sdcbr_dir)
    if (( ${#DIR} == 0 )); then
        DIR=/home/"$user"
    fi
#echo -e "\n\nBackups will be saved to and restored from $DIR"
fi
echo -e "\n\nBackups will be saved to and restored from $DIR"
}

chkdeps() {
echo "Just one moment - checking dependencies..."
deps=(pv coreutils zenity)
for dp in "${deps[@]}";do
    if rpm -q "$dp" > /dev/null ; then
        continue
    else
        if confirm "${dp} is needed - (I)nstall or (S)kip" "[I/S]" "Ii" "Ss";then
            if urpmi "$dp";then
                exit 1
            fi
        else
            continue
        fi
    fi
done
return 0
}

do_backup() {
loop=1
while ((loop > 0)); do
    echo
    IFS= read -r -p "Enter a name for the backup file (date/time will be appended automatically) " FILE
    FILE="${FILE}_$(date +%y%m%d%H%M).gz"
    FILE="${DIR}/${FILE}"
    if confirm "Backup of $DISK will be created as $FILE OK?" "Y/N/Q" "Yy" "Nn" "Qq"; then
        loop=0; continue
    elif (( $? == 2 )); then
        echo -e "\nBye!"; exit 0
    fi
done
echo
echo "Starting backup, this may take a long time.... please wait!"
echo
get_data_size
echo "Count = $SECTORS_TO_SAVE"
if dd bs=$BS count=$COUNT if="$DISK"|pv|gzip > "$FILE"; then
    echo "Backup complete and saved as $FILE"
    echo "Bye!"
    exit 0
else
    echo "An error occurred - please record any messages and report"
fi
}

do_restore() {
echo
IFS= read -r -p "Select the .gz file to restore from now? [Y/N] " -n 1
echo
if ! [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "User aborted operation!"
    exit 1
fi
loop=1
while ((loop > 0)); do
    FILE=$(zenity --file-selection --filename="$DIR"/ 2> /dev/null) 
    if ! [[ -f "$FILE" ]]; then
        echo "File not found!"
        sleep 2
        continue
    fi
    loop=0
done
IFS= read -r -p "Are you sure you want to restore $FILE to $DISK [Y/N]? " -n 1
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "User aborted operation!"
    exit 1
fi
echo
IFS= read -r -p "Are you ABSOLUTELY sure you want to overwrite $DISK [Y/N]? " -n 1
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "User aborted operation!"
    exit 1
fi
echo -e "Starting restore, this may take a long time.... please wait!\n"
echo "Restoring $FILE"
echo "To $DISK"
if gzip -dc "$FILE" | dd bs=32k of="$DISK"  status=progress; then
    echo "Restore complete from file $FILE to $DISK"
    echo "Bye!"
    exit 0
else
    echo "An error occurred - please record any messages and report"
fi
}

############## Main routine ##############
# Check we are root
clear
echo "############## Welcome to SD Card Backup Restore ##############"
((UID)) && { echo "Must be root to run $0"; exit 1; }
# Check for required packages
chkdeps
# Get or confirm the backup dir path
get_dir
# Detect the USB device to work with
detectusb

if confirm "\nDo you want to (B)ackup (R)estore or (Q)uit?" "B/R/Q" "Bb" "Rr" "Qq"; then
        echo
        do_backup
elif (( $? == 1 )); then
        echo
        do_restore
else
        echo -e "\nBye!"
        exit 0
fi
